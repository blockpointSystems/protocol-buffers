// source: protocolBuffers/odbc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.odbc.v1.CloseQueryResponse', null, global);
goog.exportSymbol('proto.odbc.v1.CloseResponse', null, global);
goog.exportSymbol('proto.odbc.v1.DummyRequest', null, global);
goog.exportSymbol('proto.odbc.v1.ExecRequest', null, global);
goog.exportSymbol('proto.odbc.v1.ExecResponse', null, global);
goog.exportSymbol('proto.odbc.v1.InitializationRequest', null, global);
goog.exportSymbol('proto.odbc.v1.QueryRequest', null, global);
goog.exportSymbol('proto.odbc.v1.QueryResponse', null, global);
goog.exportSymbol('proto.odbc.v1.StoreFileRequest', null, global);
goog.exportSymbol('proto.odbc.v1.StoreFileResponse', null, global);
goog.exportSymbol('proto.odbc.v1.XactRequest', null, global);
goog.exportSymbol('proto.odbc.v1.XactResponse', null, global);
goog.exportSymbol('proto.odbc.v1.authPacket', null, global);
goog.exportSymbol('proto.odbc.v1.datatype', null, global);
goog.exportSymbol('proto.odbc.v1.duration', null, global);
goog.exportSymbol('proto.odbc.v1.row', null, global);
goog.exportSymbol('proto.odbc.v1.schema', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.DummyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.DummyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.DummyRequest.displayName = 'proto.odbc.v1.DummyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.InitializationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.InitializationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.InitializationRequest.displayName = 'proto.odbc.v1.InitializationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.authPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.authPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.authPacket.displayName = 'proto.odbc.v1.authPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.duration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.duration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.duration.displayName = 'proto.odbc.v1.duration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.XactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.XactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.XactRequest.displayName = 'proto.odbc.v1.XactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.XactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.XactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.XactResponse.displayName = 'proto.odbc.v1.XactResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.ExecRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.ExecRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.ExecRequest.displayName = 'proto.odbc.v1.ExecRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.ExecResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.ExecResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.ExecResponse.displayName = 'proto.odbc.v1.ExecResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.QueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.QueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.QueryRequest.displayName = 'proto.odbc.v1.QueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.QueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.odbc.v1.QueryResponse.repeatedFields_, null);
};
goog.inherits(proto.odbc.v1.QueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.QueryResponse.displayName = 'proto.odbc.v1.QueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.CloseQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.CloseQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.CloseQueryResponse.displayName = 'proto.odbc.v1.CloseQueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.odbc.v1.schema.repeatedFields_, null);
};
goog.inherits(proto.odbc.v1.schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.schema.displayName = 'proto.odbc.v1.schema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.odbc.v1.row.repeatedFields_, null);
};
goog.inherits(proto.odbc.v1.row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.row.displayName = 'proto.odbc.v1.row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.CloseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.CloseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.CloseResponse.displayName = 'proto.odbc.v1.CloseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.StoreFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.StoreFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.StoreFileRequest.displayName = 'proto.odbc.v1.StoreFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.odbc.v1.StoreFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.odbc.v1.StoreFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.odbc.v1.StoreFileResponse.displayName = 'proto.odbc.v1.StoreFileResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.DummyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.DummyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.DummyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.DummyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.DummyRequest}
 */
proto.odbc.v1.DummyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.DummyRequest;
  return proto.odbc.v1.DummyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.DummyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.DummyRequest}
 */
proto.odbc.v1.DummyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.DummyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.DummyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.DummyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.DummyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.InitializationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.InitializationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.InitializationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.InitializationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dbName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.InitializationRequest}
 */
proto.odbc.v1.InitializationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.InitializationRequest;
  return proto.odbc.v1.InitializationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.InitializationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.InitializationRequest}
 */
proto.odbc.v1.InitializationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbName(value);
      break;
    case 4:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.InitializationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.InitializationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.InitializationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.InitializationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDbName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.odbc.v1.InitializationRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.InitializationRequest} returns this
 */
proto.odbc.v1.InitializationRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.odbc.v1.InitializationRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.InitializationRequest} returns this
 */
proto.odbc.v1.InitializationRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string db_name = 3;
 * @return {string}
 */
proto.odbc.v1.InitializationRequest.prototype.getDbName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.InitializationRequest} returns this
 */
proto.odbc.v1.InitializationRequest.prototype.setDbName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional authPacket auth = 4;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.InitializationRequest.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 4));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.InitializationRequest} returns this
*/
proto.odbc.v1.InitializationRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.InitializationRequest} returns this
 */
proto.odbc.v1.InitializationRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.InitializationRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.authPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.authPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.authPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.authPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uUID: msg.getUUID_asB64(),
    jWT: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.authPacket}
 */
proto.odbc.v1.authPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.authPacket;
  return proto.odbc.v1.authPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.authPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.authPacket}
 */
proto.odbc.v1.authPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLoginId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUUID(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJWT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.authPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.authPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.authPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.authPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUUID_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getJWT();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 login_id = 1;
 * @return {number}
 */
proto.odbc.v1.authPacket.prototype.getLoginId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.authPacket} returns this
 */
proto.odbc.v1.authPacket.prototype.setLoginId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes u_u_i_d = 2;
 * @return {!(string|Uint8Array)}
 */
proto.odbc.v1.authPacket.prototype.getUUID = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes u_u_i_d = 2;
 * This is a type-conversion wrapper around `getUUID()`
 * @return {string}
 */
proto.odbc.v1.authPacket.prototype.getUUID_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUUID()));
};


/**
 * optional bytes u_u_i_d = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUUID()`
 * @return {!Uint8Array}
 */
proto.odbc.v1.authPacket.prototype.getUUID_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUUID()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.odbc.v1.authPacket} returns this
 */
proto.odbc.v1.authPacket.prototype.setUUID = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string j_w_t = 3;
 * @return {string}
 */
proto.odbc.v1.authPacket.prototype.getJWT = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.authPacket} returns this
 */
proto.odbc.v1.authPacket.prototype.setJWT = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.duration.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.duration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.duration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.duration.toObject = function(includeInstance, msg) {
  var f, obj = {
    executionNanoSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.duration}
 */
proto.odbc.v1.duration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.duration;
  return proto.odbc.v1.duration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.duration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.duration}
 */
proto.odbc.v1.duration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExecutionNanoSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.duration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.duration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.duration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.duration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutionNanoSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 execution_nano_seconds = 1;
 * @return {number}
 */
proto.odbc.v1.duration.prototype.getExecutionNanoSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.duration} returns this
 */
proto.odbc.v1.duration.prototype.setExecutionNanoSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.XactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.XactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.XactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.XactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    isolationLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    readOnly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.XactRequest}
 */
proto.odbc.v1.XactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.XactRequest;
  return proto.odbc.v1.XactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.XactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.XactRequest}
 */
proto.odbc.v1.XactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsolationLevel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.XactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.XactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.XactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.XactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getIsolationLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getReadOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.XactRequest.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.XactRequest} returns this
*/
proto.odbc.v1.XactRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.XactRequest} returns this
 */
proto.odbc.v1.XactRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.XactRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 isolation_level = 2;
 * @return {number}
 */
proto.odbc.v1.XactRequest.prototype.getIsolationLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.XactRequest} returns this
 */
proto.odbc.v1.XactRequest.prototype.setIsolationLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool read_only = 3;
 * @return {boolean}
 */
proto.odbc.v1.XactRequest.prototype.getReadOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.odbc.v1.XactRequest} returns this
 */
proto.odbc.v1.XactRequest.prototype.setReadOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.XactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.XactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.XactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.XactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    xactId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.XactResponse}
 */
proto.odbc.v1.XactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.XactResponse;
  return proto.odbc.v1.XactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.XactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.XactResponse}
 */
proto.odbc.v1.XactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setXactId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.XactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.XactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.XactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.XactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getXactId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.XactResponse.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.XactResponse} returns this
*/
proto.odbc.v1.XactResponse.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.XactResponse} returns this
 */
proto.odbc.v1.XactResponse.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.XactResponse.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 xact_id = 2;
 * @return {number}
 */
proto.odbc.v1.XactResponse.prototype.getXactId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.XactResponse} returns this
 */
proto.odbc.v1.XactResponse.prototype.setXactId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.ExecRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.ExecRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.ExecRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.ExecRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    statement: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.ExecRequest}
 */
proto.odbc.v1.ExecRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.ExecRequest;
  return proto.odbc.v1.ExecRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.ExecRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.ExecRequest}
 */
proto.odbc.v1.ExecRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.ExecRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.ExecRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.ExecRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.ExecRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getStatement();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.ExecRequest.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.ExecRequest} returns this
*/
proto.odbc.v1.ExecRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.ExecRequest} returns this
 */
proto.odbc.v1.ExecRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.ExecRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string statement = 2;
 * @return {string}
 */
proto.odbc.v1.ExecRequest.prototype.getStatement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.ExecRequest} returns this
 */
proto.odbc.v1.ExecRequest.prototype.setStatement = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.ExecResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.ExecResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.ExecResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.ExecResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    response: jspb.Message.getFieldWithDefault(msg, 2, ""),
    insertId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    affectedRows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    duration: (f = msg.getDuration()) && proto.odbc.v1.duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.ExecResponse}
 */
proto.odbc.v1.ExecResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.ExecResponse;
  return proto.odbc.v1.ExecResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.ExecResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.ExecResponse}
 */
proto.odbc.v1.ExecResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInsertId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAffectedRows(value);
      break;
    case 5:
      var value = new proto.odbc.v1.duration;
      reader.readMessage(value,proto.odbc.v1.duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.ExecResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.ExecResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.ExecResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.ExecResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInsertId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAffectedRows();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.odbc.v1.duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.ExecResponse.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.ExecResponse} returns this
*/
proto.odbc.v1.ExecResponse.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.ExecResponse} returns this
 */
proto.odbc.v1.ExecResponse.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.ExecResponse.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string response = 2;
 * @return {string}
 */
proto.odbc.v1.ExecResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.ExecResponse} returns this
 */
proto.odbc.v1.ExecResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 insert_id = 3;
 * @return {number}
 */
proto.odbc.v1.ExecResponse.prototype.getInsertId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.ExecResponse} returns this
 */
proto.odbc.v1.ExecResponse.prototype.setInsertId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 affected_rows = 4;
 * @return {number}
 */
proto.odbc.v1.ExecResponse.prototype.getAffectedRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.ExecResponse} returns this
 */
proto.odbc.v1.ExecResponse.prototype.setAffectedRows = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional duration duration = 5;
 * @return {?proto.odbc.v1.duration}
 */
proto.odbc.v1.ExecResponse.prototype.getDuration = function() {
  return /** @type{?proto.odbc.v1.duration} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.duration, 5));
};


/**
 * @param {?proto.odbc.v1.duration|undefined} value
 * @return {!proto.odbc.v1.ExecResponse} returns this
*/
proto.odbc.v1.ExecResponse.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.ExecResponse} returns this
 */
proto.odbc.v1.ExecResponse.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.ExecResponse.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.QueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.QueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.QueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.QueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    statement: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxResponseLength: jspb.Message.getFieldWithDefault(msg, 3, 0),
    batchSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.QueryRequest}
 */
proto.odbc.v1.QueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.QueryRequest;
  return proto.odbc.v1.QueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.QueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.QueryRequest}
 */
proto.odbc.v1.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatement(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxResponseLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.QueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.QueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.QueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.QueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getStatement();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxResponseLength();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.QueryRequest.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.QueryRequest} returns this
*/
proto.odbc.v1.QueryRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.QueryRequest} returns this
 */
proto.odbc.v1.QueryRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.QueryRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string statement = 2;
 * @return {string}
 */
proto.odbc.v1.QueryRequest.prototype.getStatement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.QueryRequest} returns this
 */
proto.odbc.v1.QueryRequest.prototype.setStatement = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 max_response_length = 3;
 * @return {number}
 */
proto.odbc.v1.QueryRequest.prototype.getMaxResponseLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.QueryRequest} returns this
 */
proto.odbc.v1.QueryRequest.prototype.setMaxResponseLength = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 batch_size = 4;
 * @return {number}
 */
proto.odbc.v1.QueryRequest.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.QueryRequest} returns this
 */
proto.odbc.v1.QueryRequest.prototype.setBatchSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.odbc.v1.QueryResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.QueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.QueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.QueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.QueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    respLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    respSchema: (f = msg.getRespSchema()) && proto.odbc.v1.schema.toObject(includeInstance, f),
    resultSetList: jspb.Message.toObjectList(msg.getResultSetList(),
    proto.odbc.v1.row.toObject, includeInstance),
    duration: (f = msg.getDuration()) && proto.odbc.v1.duration.toObject(includeInstance, f),
    done: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.QueryResponse}
 */
proto.odbc.v1.QueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.QueryResponse;
  return proto.odbc.v1.QueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.QueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.QueryResponse}
 */
proto.odbc.v1.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRespLength(value);
      break;
    case 3:
      var value = new proto.odbc.v1.schema;
      reader.readMessage(value,proto.odbc.v1.schema.deserializeBinaryFromReader);
      msg.setRespSchema(value);
      break;
    case 4:
      var value = new proto.odbc.v1.row;
      reader.readMessage(value,proto.odbc.v1.row.deserializeBinaryFromReader);
      msg.addResultSet(value);
      break;
    case 5:
      var value = new proto.odbc.v1.duration;
      reader.readMessage(value,proto.odbc.v1.duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.QueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.QueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.QueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.QueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getRespLength();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRespSchema();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.odbc.v1.schema.serializeBinaryToWriter
    );
  }
  f = message.getResultSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.odbc.v1.row.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.odbc.v1.duration.serializeBinaryToWriter
    );
  }
  f = message.getDone();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.QueryResponse.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.QueryResponse} returns this
*/
proto.odbc.v1.QueryResponse.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.QueryResponse} returns this
 */
proto.odbc.v1.QueryResponse.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.QueryResponse.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 resp_length = 2;
 * @return {number}
 */
proto.odbc.v1.QueryResponse.prototype.getRespLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.QueryResponse} returns this
 */
proto.odbc.v1.QueryResponse.prototype.setRespLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional schema resp_schema = 3;
 * @return {?proto.odbc.v1.schema}
 */
proto.odbc.v1.QueryResponse.prototype.getRespSchema = function() {
  return /** @type{?proto.odbc.v1.schema} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.schema, 3));
};


/**
 * @param {?proto.odbc.v1.schema|undefined} value
 * @return {!proto.odbc.v1.QueryResponse} returns this
*/
proto.odbc.v1.QueryResponse.prototype.setRespSchema = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.QueryResponse} returns this
 */
proto.odbc.v1.QueryResponse.prototype.clearRespSchema = function() {
  return this.setRespSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.QueryResponse.prototype.hasRespSchema = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated row result_set = 4;
 * @return {!Array<!proto.odbc.v1.row>}
 */
proto.odbc.v1.QueryResponse.prototype.getResultSetList = function() {
  return /** @type{!Array<!proto.odbc.v1.row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.odbc.v1.row, 4));
};


/**
 * @param {!Array<!proto.odbc.v1.row>} value
 * @return {!proto.odbc.v1.QueryResponse} returns this
*/
proto.odbc.v1.QueryResponse.prototype.setResultSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.odbc.v1.row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.odbc.v1.row}
 */
proto.odbc.v1.QueryResponse.prototype.addResultSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.odbc.v1.row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.odbc.v1.QueryResponse} returns this
 */
proto.odbc.v1.QueryResponse.prototype.clearResultSetList = function() {
  return this.setResultSetList([]);
};


/**
 * optional duration duration = 5;
 * @return {?proto.odbc.v1.duration}
 */
proto.odbc.v1.QueryResponse.prototype.getDuration = function() {
  return /** @type{?proto.odbc.v1.duration} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.duration, 5));
};


/**
 * @param {?proto.odbc.v1.duration|undefined} value
 * @return {!proto.odbc.v1.QueryResponse} returns this
*/
proto.odbc.v1.QueryResponse.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.QueryResponse} returns this
 */
proto.odbc.v1.QueryResponse.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.QueryResponse.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool done = 6;
 * @return {boolean}
 */
proto.odbc.v1.QueryResponse.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.odbc.v1.QueryResponse} returns this
 */
proto.odbc.v1.QueryResponse.prototype.setDone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.CloseQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.CloseQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.CloseQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.CloseQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.CloseQueryResponse}
 */
proto.odbc.v1.CloseQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.CloseQueryResponse;
  return proto.odbc.v1.CloseQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.CloseQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.CloseQueryResponse}
 */
proto.odbc.v1.CloseQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.CloseQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.CloseQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.CloseQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.CloseQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.odbc.v1.schema.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.schema.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    columnTypeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    columnSizeList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    columnIsNullableBitmap: msg.getColumnIsNullableBitmap_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.schema}
 */
proto.odbc.v1.schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.schema;
  return proto.odbc.v1.schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.schema}
 */
proto.odbc.v1.schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumnName(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.odbc.v1.datatype>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addColumnType(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addColumnSize(values[i]);
      }
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setColumnIsNullableBitmap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getColumnTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getColumnSizeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = message.getColumnIsNullableBitmap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.odbc.v1.schema.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string column_name = 2;
 * @return {!Array<string>}
 */
proto.odbc.v1.schema.prototype.getColumnNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.setColumnNameList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.addColumnName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.clearColumnNameList = function() {
  return this.setColumnNameList([]);
};


/**
 * repeated datatype column_type = 3;
 * @return {!Array<!proto.odbc.v1.datatype>}
 */
proto.odbc.v1.schema.prototype.getColumnTypeList = function() {
  return /** @type {!Array<!proto.odbc.v1.datatype>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.odbc.v1.datatype>} value
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.setColumnTypeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.odbc.v1.datatype} value
 * @param {number=} opt_index
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.addColumnType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.clearColumnTypeList = function() {
  return this.setColumnTypeList([]);
};


/**
 * repeated int64 column_size = 4;
 * @return {!Array<number>}
 */
proto.odbc.v1.schema.prototype.getColumnSizeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.setColumnSizeList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.addColumnSize = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.clearColumnSizeList = function() {
  return this.setColumnSizeList([]);
};


/**
 * optional bytes column_is_nullable_bitmap = 5;
 * @return {!(string|Uint8Array)}
 */
proto.odbc.v1.schema.prototype.getColumnIsNullableBitmap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes column_is_nullable_bitmap = 5;
 * This is a type-conversion wrapper around `getColumnIsNullableBitmap()`
 * @return {string}
 */
proto.odbc.v1.schema.prototype.getColumnIsNullableBitmap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getColumnIsNullableBitmap()));
};


/**
 * optional bytes column_is_nullable_bitmap = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getColumnIsNullableBitmap()`
 * @return {!Uint8Array}
 */
proto.odbc.v1.schema.prototype.getColumnIsNullableBitmap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getColumnIsNullableBitmap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.odbc.v1.schema} returns this
 */
proto.odbc.v1.schema.prototype.setColumnIsNullableBitmap = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.odbc.v1.row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.row.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.row.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: msg.getColumnsList_asB64(),
    nullColumnBitmap: msg.getNullColumnBitmap_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.row}
 */
proto.odbc.v1.row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.row;
  return proto.odbc.v1.row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.row}
 */
proto.odbc.v1.row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addColumns(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNullColumnBitmap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getNullColumnBitmap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes columns = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.odbc.v1.row.prototype.getColumnsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes columns = 1;
 * This is a type-conversion wrapper around `getColumnsList()`
 * @return {!Array<string>}
 */
proto.odbc.v1.row.prototype.getColumnsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getColumnsList()));
};


/**
 * repeated bytes columns = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getColumnsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.odbc.v1.row.prototype.getColumnsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getColumnsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.odbc.v1.row} returns this
 */
proto.odbc.v1.row.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.odbc.v1.row} returns this
 */
proto.odbc.v1.row.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.odbc.v1.row} returns this
 */
proto.odbc.v1.row.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * optional bytes null_column_bitmap = 2;
 * @return {!(string|Uint8Array)}
 */
proto.odbc.v1.row.prototype.getNullColumnBitmap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes null_column_bitmap = 2;
 * This is a type-conversion wrapper around `getNullColumnBitmap()`
 * @return {string}
 */
proto.odbc.v1.row.prototype.getNullColumnBitmap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNullColumnBitmap()));
};


/**
 * optional bytes null_column_bitmap = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNullColumnBitmap()`
 * @return {!Uint8Array}
 */
proto.odbc.v1.row.prototype.getNullColumnBitmap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNullColumnBitmap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.odbc.v1.row} returns this
 */
proto.odbc.v1.row.prototype.setNullColumnBitmap = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.CloseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.CloseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.CloseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.CloseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionDuration: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.CloseResponse}
 */
proto.odbc.v1.CloseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.CloseResponse;
  return proto.odbc.v1.CloseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.CloseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.CloseResponse}
 */
proto.odbc.v1.CloseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.CloseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.CloseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.CloseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.CloseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionDuration();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_duration = 1;
 * @return {string}
 */
proto.odbc.v1.CloseResponse.prototype.getSessionDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.CloseResponse} returns this
 */
proto.odbc.v1.CloseResponse.prototype.setSessionDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.StoreFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.StoreFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.StoreFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.StoreFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    fileName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileBytes: msg.getFileBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.StoreFileRequest}
 */
proto.odbc.v1.StoreFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.StoreFileRequest;
  return proto.odbc.v1.StoreFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.StoreFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.StoreFileRequest}
 */
proto.odbc.v1.StoreFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.StoreFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.StoreFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.StoreFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.StoreFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.StoreFileRequest.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.StoreFileRequest} returns this
*/
proto.odbc.v1.StoreFileRequest.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.StoreFileRequest} returns this
 */
proto.odbc.v1.StoreFileRequest.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.StoreFileRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.odbc.v1.StoreFileRequest.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.odbc.v1.StoreFileRequest} returns this
 */
proto.odbc.v1.StoreFileRequest.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes file_bytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.odbc.v1.StoreFileRequest.prototype.getFileBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes file_bytes = 3;
 * This is a type-conversion wrapper around `getFileBytes()`
 * @return {string}
 */
proto.odbc.v1.StoreFileRequest.prototype.getFileBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileBytes()));
};


/**
 * optional bytes file_bytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileBytes()`
 * @return {!Uint8Array}
 */
proto.odbc.v1.StoreFileRequest.prototype.getFileBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.odbc.v1.StoreFileRequest} returns this
 */
proto.odbc.v1.StoreFileRequest.prototype.setFileBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.odbc.v1.StoreFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.odbc.v1.StoreFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.odbc.v1.StoreFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.StoreFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.odbc.v1.authPacket.toObject(includeInstance, f),
    insertId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fileSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duration: (f = msg.getDuration()) && proto.odbc.v1.duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.odbc.v1.StoreFileResponse}
 */
proto.odbc.v1.StoreFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.odbc.v1.StoreFileResponse;
  return proto.odbc.v1.StoreFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.odbc.v1.StoreFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.odbc.v1.StoreFileResponse}
 */
proto.odbc.v1.StoreFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.odbc.v1.authPacket;
      reader.readMessage(value,proto.odbc.v1.authPacket.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInsertId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFileSize(value);
      break;
    case 4:
      var value = new proto.odbc.v1.duration;
      reader.readMessage(value,proto.odbc.v1.duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.odbc.v1.StoreFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.odbc.v1.StoreFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.odbc.v1.StoreFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.odbc.v1.StoreFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.odbc.v1.authPacket.serializeBinaryToWriter
    );
  }
  f = message.getInsertId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFileSize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.odbc.v1.duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional authPacket auth = 1;
 * @return {?proto.odbc.v1.authPacket}
 */
proto.odbc.v1.StoreFileResponse.prototype.getAuth = function() {
  return /** @type{?proto.odbc.v1.authPacket} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.authPacket, 1));
};


/**
 * @param {?proto.odbc.v1.authPacket|undefined} value
 * @return {!proto.odbc.v1.StoreFileResponse} returns this
*/
proto.odbc.v1.StoreFileResponse.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.StoreFileResponse} returns this
 */
proto.odbc.v1.StoreFileResponse.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.StoreFileResponse.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 insert_id = 2;
 * @return {number}
 */
proto.odbc.v1.StoreFileResponse.prototype.getInsertId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.StoreFileResponse} returns this
 */
proto.odbc.v1.StoreFileResponse.prototype.setInsertId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 file_size = 3;
 * @return {number}
 */
proto.odbc.v1.StoreFileResponse.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.odbc.v1.StoreFileResponse} returns this
 */
proto.odbc.v1.StoreFileResponse.prototype.setFileSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional duration duration = 4;
 * @return {?proto.odbc.v1.duration}
 */
proto.odbc.v1.StoreFileResponse.prototype.getDuration = function() {
  return /** @type{?proto.odbc.v1.duration} */ (
    jspb.Message.getWrapperField(this, proto.odbc.v1.duration, 4));
};


/**
 * @param {?proto.odbc.v1.duration|undefined} value
 * @return {!proto.odbc.v1.StoreFileResponse} returns this
*/
proto.odbc.v1.StoreFileResponse.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.odbc.v1.StoreFileResponse} returns this
 */
proto.odbc.v1.StoreFileResponse.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.odbc.v1.StoreFileResponse.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.odbc.v1.datatype = {
  UNDEF: 0,
  NULL: 1,
  BYTEARRAY: 2,
  STRING: 3,
  INT8: 4,
  UINT8: 5,
  INT16: 6,
  UINT16: 7,
  INT32: 8,
  UINT32: 9,
  INT64: 10,
  UINT64: 11,
  FLOAT32: 12,
  FLOAT64: 13,
  BOOL: 14,
  TIMESTAMP: 15,
  DATETIME: 16,
  DATE: 17,
  TIME: 18,
  UUID: 19
};

goog.object.extend(exports, proto.odbc.v1);
