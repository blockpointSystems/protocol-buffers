syntax = "proto3";

package odbc.v1;

// bsqlpb is the golang package that will be used to communicate and cary out transactions with the database
option go_package = "gitlab.com/blockpoint/protocol-buffers/v1/odbc";


message DummyRequest {}


message InitializationRequest {
    string username = 1;
    string password = 2;
    string db_name  = 3;
    authPacket auth = 4;
}

message authPacket {
    uint64 login_id = 1;
    bytes  u_u_i_d  = 2;
    string j_w_t    = 3;
}

message duration {
    int64 execution_nano_seconds  = 1;
}

message XactRequest {
    authPacket auth = 1;

    int32 isolation_level = 2;
    bool  read_only       = 3;
}

message XactResponse {
    authPacket auth = 1;
    uint64 xact_id  = 2;
}

message ExecRequest {
    authPacket auth  = 1;
    string statement = 2;
}

message ExecResponse {
    authPacket auth = 1;

    string   response      = 2;
    int64    insert_id     = 3;
    int64    affected_rows = 4;
    duration duration      = 5;
}


message QueryRequest {
    authPacket auth  = 1;
    string statement = 2;

    int32 max_response_length = 3;
    int32 batch_size = 4;
}

message QueryResponse {
    authPacket auth  = 1;

    int32    resp_length    = 2;
    schema   resp_schema    = 3;
    repeated row result_set = 4;
    duration duration       = 5;

    bool     done           = 6;
}

message CloseQueryResponse {}

message schema {
    string            table_name    = 1;
    repeated string   column_name   = 2;
    repeated datatype column_type   = 3;
    repeated int64    column_size   = 4;
    bytes column_is_nullable_bitmap = 5;
}

enum datatype {
    UNDEF = 0;
    NULL  = 1;

    BYTEARRAY = 2;
    STRING    = 3;

    INT8   = 4;
    UINT8  = 5;
    INT16  = 6;
    UINT16 = 7;
    INT32  = 8;
    UINT32 = 9;
    INT64  = 10;
    UINT64 = 11;
    FLOAT32    = 12;
    FLOAT64    = 13;
    BOOL = 14;
    TIMESTAMP = 15;
    DATETIME = 16;
    DATE = 17;
    TIME = 18;
    UUID = 19;
}

message row {
    repeated bytes columns   = 1;
    bytes null_column_bitmap = 2;
    // Null flag? bitmap?
}


message CloseResponse {
    string session_duration = 1;
}

message LoadRequest {}
message LoadResponse {}


// Query Services
// Query Services define all the different gRPC queries that can be performed within the bSQL Protocol Buffer
service MDBService {

    ////////////////////////////////////////////////////////////////////////////////
    ////                            Unary requests                              ////
    ////////////////////////////////////////////////////////////////////////////////

    // Register new connection
    rpc InitializeConnection(InitializationRequest) returns (authPacket) {};


    //    Transactions    //

    // Begin: Start Transaction
    rpc Begin(XactRequest)  returns (XactResponse) {};
    // Close: Close session and all active transactions
    rpc Close(authPacket) returns (CloseResponse) {};


    //    Commands    //

    // Exec:  Execute a statement / command
    rpc Exec(ExecRequest)  returns (ExecResponse) {};

    // Query: Query the database for information
    rpc Query(QueryRequest)     returns (stream QueryResponse) {};
    rpc CloseQuery(authPacket)  returns (CloseQueryResponse) {};

    // Query sends a single bSQL statement and returns its corresponding response
    // rpc Query(QueryRequest) returns (QueryResponse) {};


    rpc Load(stream LoadRequest) returns (LoadResponse) {};

    // Close


    // // Login sends a packet of credentials, verifies them and then responds with a user specific token
    // rpc Login(LoginRequest) returns (LoginResponse) {};
    // // Register Administrator registers a database level user or someone that can create new blockchains and configure new schemas
    // rpc Register(RegisterRequest) returns (RegisterResponse) {};


    ////////////////////////////////////////////////////////////////////////////////
    ////                        bi-directional requests                         ////
    ////////////////////////////////////////////////////////////////////////////////
}